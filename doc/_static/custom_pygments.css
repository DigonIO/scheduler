/* CODE HIGHLIGHTING DARK MODE */
/* Heavily copied from VSCode Dark+ (default) color scheme*/

/* NOTE: this is not the best way to define our own color scheme for pygments */
/* It would be better to define our own pygments style written in python */
/* https://stackoverflow.com/questions/48615629/how-to-include-pygments-styles-in-a-sphinx-project */
/* Settings needs to be duplicated, as browsers not set with preferes-color-scheme dark */
/* Would be using the defaults otherwise when using the color switch */

.highlight { background: #f0f3f3; /* color: #d0d0d0 */ }
.highlight .l { color: #CC3300 } /* Literal, yaml value */
.highlight .k { color: #204a87; /* color: #569CD6; */ font-weight: bold } /* Keyword, Literal['class', 'return', 'for', 'def'] */
.highlight .n { color: #006699 /* color: #4EC9B0; */ } /* Name, named variables/identifier/class */
.highlight .o { font-weight: bold } /* Operator, operators: ['.', '=', '->'] */
.highlight .go { color: #888888 } /* Generic.Output */
.highlight .kn { color: #AA22FF; font-weight: bold } /* Keyword.Namespace, Literal['import'] | Literal['from'] */
.highlight .nb { color: #00AA88 } /* Name.Builtin, functions, dtypes? Literal['set', 'str', 'dict', 'int'] */
.highlight .nc { color: #00AA88; font-weight: bold; text-decoration: none } /* Name.Class, identifier class */
.highlight .nd { color: #00AA88 /* color: #DCDCAA; */ } /* Name.Decorator, Literal['@property'] */
.highlight .nn { color: #00AA88; font-weight: bold; text-decoration: none } /* Name.Namespace, import: module name */
.highlight .nt { color: #330099; font-weight: bold } /* Name.Tag, yaml key */
.highlight .s2 { color: #CC3300 } /* Literal.String.Double, strings two ticks */
.highlight .s1 { color: #CC3300 } /* Literal.String.Single, strings one tick */
.highlight .sd { color: #CC3300; font-style: italic } /* Literal.String.Doc */

@media not print {
body[data-theme="dark"] .highlight { background: #1E1E1E; /* color: #d0d0d0 */ }
body[data-theme="dark"] .highlight .k { color: #C586C0; /* color: #569CD6; */ font-weight: bold } /* Keyword, Literal['class', 'return', 'for', 'def'] */
body[data-theme="dark"] .highlight .l { color: #CE9178 } /* Literal, yaml value */
body[data-theme="dark"] .highlight .n { color: #9CDCFE /* color: #4EC9B0; */ } /* Name, named variables/identifier/class */
body[data-theme="dark"] .highlight .o { color: #FFD700; /*#d0d0d0*/ font-weight: bold } /* Operator, operators: ['.', '=', '->'] */
body[data-theme="dark"] .highlight .p { color: #FFD700 } /* Punctuation, paranthesis, commas: ['{', '}', '(', ')', ','] */
body[data-theme="dark"] .highlight .c1 { color: #6A9955; font-style: italic } /* Comment.Single, comment [`#`] */
body[data-theme="dark"] .highlight .go { color: #cccccc; /*D4D4D4*/ } /* Generic.Output */
body[data-theme="dark"] .highlight .gp { color: #11D116; /* color: #cccccc; */ } /* Generic.Prompt, Literal['>>>'] */
body[data-theme="dark"] .highlight .kc { color: #569CD6; font-weight: bold } /* Keyword.Constant, None */
body[data-theme="dark"] .highlight .kn { color: #C586C0; font-weight: bold } /* Keyword.Namespace, Literal['import'] | Literal['from'] */
body[data-theme="dark"] .highlight .nb { color: #4EC9B0 /* color: #2fbccd; */ } /* Name.Builtin, functions, dtypes? Literal['set', 'str', 'dict', 'int'] */
body[data-theme="dark"] .highlight .nc { color: #4EC9B0; font-weight: bold; text-decoration: none } /* Name.Class, identifier class */
body[data-theme="dark"] .highlight .nd { color: #4EC9B0 /* color: #DCDCAA; */ } /* Name.Decorator, Literal['@property'] */
body[data-theme="dark"] .highlight .ne { color: #4EC9B0; font-weight: bold } /* Name.Exception */
body[data-theme="dark"] .highlight .nf { color: #DCDCAA /* color: #9CDCFE; */ } /* Name.Function, identifier function */
body[data-theme="dark"] .highlight .nn { color: #4EC9B0; font-weight: bold; text-decoration: none } /* Name.Namespace, import: module name */
body[data-theme="dark"] .highlight .nt { color: #569CD6; font-weight: bold } /* Name.Tag, yaml key */
body[data-theme="dark"] .highlight .ow { color: #569CD6; font-weight: bold } /* Operator.Word, operators: ['in'] */
body[data-theme="dark"] .highlight .s2 { color: #CE9178 } /* Literal.String.Double, strings two ticks */
body[data-theme="dark"] .highlight .s1 { color: #CE9178 } /* Literal.String.Single, strings one tick */
body[data-theme="dark"] .highlight .sd { color: #CE9178; font-style: italic } /* Literal.String.Doc */
body[data-theme="dark"] .highlight .bp { color: #2fbccd } /* Name.Builtin.Pseudo, Literal['self'] */
@media (prefers-color-scheme: dark) {
    body:not([data-theme="light"]) .highlight { background: #1E1E1E; /* color: #d0d0d0 */ }
    body:not([data-theme="light"]) .highlight .k { color: #C586C0; /* color: #569CD6; */ font-weight: bold } /* Keyword, Literal['class', 'return', 'for', 'def'] */
    body:not([data-theme="light"]) .highlight .l { color: #CE9178 } /* Literal, yaml value */
    body:not([data-theme="light"]) .highlight .n { color: #9CDCFE /* color: #4EC9B0; */ } /* Name, named variables/identifier/class */
    body:not([data-theme="light"]) .highlight .o { color: #FFD700; /*#d0d0d0*/ font-weight: bold } /* Operator, operators: ['.', '=', '->'] */
    body:not([data-theme="light"]) .highlight .p { color: #FFD700 } /* Punctuation, paranthesis, commas: ['{', '}', '(', ')', ','] */
    body:not([data-theme="light"]) .highlight .c1 { color: #6A9955; font-style: italic } /* Comment.Single, comment [`#`] */
    body:not([data-theme="light"]) .highlight .go { color: #cccccc; /*D4D4D4*/ } /* Generic.Output */
    body:not([data-theme="light"]) .highlight .gp { color: #11D116; /* color: #cccccc; */ } /* Generic.Prompt, Literal['>>>'] */
    body:not([data-theme="light"]) .highlight .kc { color: #569CD6; font-weight: bold } /* Keyword.Constant, None */
    body:not([data-theme="light"]) .highlight .kn { color: #C586C0; font-weight: bold } /* Keyword.Namespace, Literal['import'] | Literal['from'] */
    body:not([data-theme="light"]) .highlight .nb { color: #4EC9B0 } /* Name.Builtin, functions, dtypes? Literal['set', 'str', 'dict', 'int'] */
    body:not([data-theme="light"]) .highlight .nc { color: #4EC9B0; font-weight: bold; text-decoration: none } /* Name.Class, identifier class */
    body:not([data-theme="light"]) .highlight .nd { color: #4EC9B0 /* color: #DCDCAA; */ } /* Name.Decorator, Literal['@property'] */
    body:not([data-theme="light"]) .highlight .ne { color: #4EC9B0; font-weight: bold } /* Name.Exception */
    body:not([data-theme="light"]) .highlight .nf { color: #DCDCAA /* color: #9CDCFE; */ } /* Name.Function, identifier function */
    body:not([data-theme="light"]) .highlight .nn { color: #4EC9B0; font-weight: bold; text-decoration: none } /* Name.Namespace, import: module name */
    body:not([data-theme="light"]) .highlight .nt { color: #569CD6; font-weight: bold } /* Name.Tag, yaml key */
    body:not([data-theme="light"]) .highlight .ow { color: #569CD6; font-weight: bold } /* Operator.Word, operators: ['in'] */
    body:not([data-theme="light"]) .highlight .s2 { color: #CE9178 } /* Literal.String.Double, strings two ticks */
    body:not([data-theme="light"]) .highlight .s1 { color: #CE9178 } /* Literal.String.Single, strings one tick */
    body:not([data-theme="light"]) .highlight .sd { color: #CE9178; font-style: italic } /* Literal.String.Doc */
    body:not([data-theme="light"]) .highlight .bp { color: #2fbccd } /* Name.Builtin.Pseudo, Literal['self'] */
}
}